//cron
/*
const checkTaskStatus = async () => {
  try {
    const overdueTasks = await taskModel.find({
      dueTime: { $lt: new Date() },
      status: 'not done',
    });

    for (const task of overdueTasks) {
      console.log(`Task for student ${task.studentName} is overdue.`);
      task.status = 'overdue';
      await task.save();
    }
  } catch (error) {
    console.error('Error checking task status:', error);
  }
};

cron.schedule('* * * * *', checkTaskStatus);
*/

export const generateAdminToken = (email) => {
  return jwt.sign({ email }, adminSecretKey, { expiresIn: '1h' });
};

export const generateStudentToken = (email) => {
  return jwt.sign({ email }, studentSecretKey, { expiresIn: '1h' });
};

//auth


app.post('/admin', (req, res) => {
  const { email, password } = req.body;
  const adminEmail = 'admin@aadmin.com';
  const adminPassword = 'admin';

  if (email === adminEmail && password === adminPassword) {
    const token = jwt.sign({ email }, adminSecretKey, { expiresIn: '1h' });
    res.json({ token });
  } else {
    res.status(401).json({ message: 'Unauthorized' });
  }
});

app.post('/student', async (req, res) => {
  const { email, password } = req.body;

  try {
    const student = await Student.findOne({ email, password });

    if (student) {
      const token = jwt.sign({ email }, studentSecretKey, { expiresIn: '1h' });
      res.json({ token });
    } else {
      res.status(401).json({ message: 'Unauthorized' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Authentication error' });
  }
});

export function verifyAdminToken(req, res, next) {
  const token = req.headers['authorization'];
  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }
  jwt.verify(token, adminSecretKey, (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: 'Unauthorized' });
    }
    req.adminEmail = decoded.email;
    next();
  });
}

export function verifyStudentToken(req, res, next) {
  const token = req.headers['authorization'];
  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }
  jwt.verify(token, studentSecretKey, (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: 'Unauthorized' });
    }
    req.studentEmail = decoded.email;
    next();
  });
}

//auth2

/*
//admin login
app.post('/admin/login', (req, res) => {
  const { email, password } = req.body;
  const adminEmail = 'admin@aadmin.com';
  const adminPassword = 'admin';

  if (email === adminEmail && password === adminPassword) {
    const token = jwt.sign({ email, role: 'admin' }, adminSecretKey, { expiresIn: '1h' });
    res.json({ token });
  } else {
    res.status(401).json({ message: 'Unauthorized' });
  }
});

//student login
app.post('/student/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const student = await Student.findOne({ email, password });

    if (student) {
      const token = jwt.sign({ email, role: 'student' }, studentSecretKey, { expiresIn: '1h' });
      res.json({ token });
    } else {
      res.status(401).json({ message: 'Unauthorized' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Authentication error' });
  }
});

export function verifyAdminToken(req, res, next) {
  const token = req.headers['authorization'];
  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  jwt.verify(token, adminSecretKey, (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: 'Unauthorized' });
    }
    if (decoded.role === 'admin') {
      req.adminEmail = decoded.email;
      next();
    } else {
      res.status(403).json({ message: 'Forbidden' });
    }
  });
}

export function verifyStudentToken(req, res, next) {
  const token = req.headers['authorization'];
  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  jwt.verify(token, studentSecretKey, (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: 'Unauthorized' });
    }
    if (decoded.role === 'student') {
      req.studentEmail = decoded.email;
      next();
    } else {
      res.status(403).json({ message: 'Forbidden' });
    }
  });
}
*/

//auth3

app.post('/admin/login', (req, res) => {
  const { email, password } = req.body;
  const adminEmail = 'admin@aadmin.com';
  const adminPassword = 'admin';

  if (email === adminEmail && password === adminPassword) {
    const token = jwt.sign({ email, role: 'admin' }, adminSecretKey, { expiresIn: '1h' });
    res.json({ token });
  } else {
    res.status(401).json({ message: 'Unauthorized' });
  }
});

app.post('/student/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const student = await Student.findOne({ email, password });

    if (student) {
      const token = jwt.sign({ email, role: 'student' }, studentSecretKey, { expiresIn: '1h' });
      res.json({ token });
    } else {
      res.status(401).json({ message: 'Unauthorized' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Authentication error' });
  }
});

export function verifyAdminToken(req, res, next) {
  const token = req.headers['authorization'];
  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }
  jwt.verify(token, adminSecretKey, (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: 'Unauthorized' });
    }
    if (decoded.role === 'admin') {
      req.adminEmail = decoded.email;
      next();
    } else {
      res.status(403).json({ message: 'Forbidden' });
    }
  });
}

export function verifyStudentToken(req, res, next) {
  const token = req.headers['authorization'];
  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }
  jwt.verify(token, studentSecretKey, (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: 'Unauthorized' });
    }
    if (decoded.role === 'student') {
      req.studentEmail = decoded.email;
      next();
    } else {
      res.status(403).json({ message: 'Forbidden' });
    }
  });
}

/*
app.post('/admin/login', (req, res) => {
  const { email, password } = req.body;
  const adminEmail = 'admin@aadmin.com';
  const adminPassword = 'admin';

  if (email === adminEmail && password === adminPassword) {
    const token = jwt.sign({ email, role: 'admin' }, adminSecretKey, { expiresIn: '1h' });
    res.json({ token });
  } else {
    res.status(401).json({ message: 'Unauthorized' });
  }
});

app.post('/student/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const student = await Student.findOne({ email, password });

    if (student) {
      const token = jwt.sign({ email, role: 'student' }, studentSecretKey, { expiresIn: '1h' });
      res.json({ token });
    } else {
      res.status(401).json({ message: 'Unauthorized' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Authentication error' });
  }
});*/


const adminSecretKey = process.env.ADMIN_SECRET_KEY || 'admin1234';
const studentSecretKey = process.env.STUDENT_SECRET_KEY || 'std1234';


const app = express();
app.use(express.json());